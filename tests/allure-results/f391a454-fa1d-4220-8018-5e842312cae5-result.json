{"name": "Validate About Button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.sidebar_test.TestSidebar object at 0x000002B92D7D3670>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fb40af40452725eeac6e954f8900b93a\")>\nlogin_page = <pages.login_page.LoginPage object at 0x000002B92D805C00>\nsidebar_page = <pages.sidebar_page.SideBarPage object at 0x000002B92D805090>\n\n    @allure.title(\"Validate About Button\")\n    @allure.description(\"This test validates the About button functionality.\")\n    def test_02_sidebar_functionality(self, setup, login_page, sidebar_page):\n        login_page.fill_info(self.valid_username, self.valid_password)\n        current_url = sidebar_page.driver.current_url\n        expected_url = \"https://saucelabs.com\"\n    \n        sidebar_page.go_to_about_page()\n        time.sleep(1)  # Add a small delay to allow for the page to load\n        print(\"Current URL after navigating to about page:\", sidebar_page.driver.current_url)\n>       WebDriverWait(sidebar_page.driver, 10).until(\n            EC.url_to_be(expected_url)  # Use the local variable `expected_url` here\n        )\n\nsidebar_test.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"fb40af40452725eeac6e954f8900b93a\")>\nmethod = <function url_to_be.<locals>._predicate at 0x000002B92D82C4C0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "This test validates the About button functionality.", "attachments": [{"name": "stdout", "source": "ff24d909-1ab5-4d2c-98b7-4926ee7e1226-attachment.txt", "type": "text/plain"}], "start": 1740118713589, "stop": 1740118730959, "uuid": "c6967096-68a8-4d02-bcb5-c895efd82721", "historyId": "06f76eec882616c8fd5fa1787867be41", "testCaseId": "06f76eec882616c8fd5fa1787867be41", "fullName": "tests.sidebar_test.TestSidebar#test_02_sidebar_functionality", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "sidebar_test"}, {"name": "subSuite", "value": "TestSidebar"}, {"name": "host", "value": "Assaf"}, {"name": "thread", "value": "12996-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.sidebar_test"}]}