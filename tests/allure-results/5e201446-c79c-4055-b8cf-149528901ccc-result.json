{"name": "Validate Reset Button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=133.0.6943.127)\nStacktrace:\n\tGetHandleVerifier [0x00007FF665FB6EE5+28773]\n\t(No symbol) [0x00007FF665F225D0]\n\t(No symbol) [0x00007FF665DB8FAA]\n\t(No symbol) [0x00007FF665E0F05A]\n\t(No symbol) [0x00007FF665E0F4BC]\n\t(No symbol) [0x00007FF665E62A27]\n\t(No symbol) [0x00007FF665E3728F]\n\t(No symbol) [0x00007FF665E5F6F3]\n\t(No symbol) [0x00007FF665E37023]\n\t(No symbol) [0x00007FF665DFFF5E]\n\t(No symbol) [0x00007FF665E011E3]\n\tGetHandleVerifier [0x00007FF66630422D+3490733]\n\tGetHandleVerifier [0x00007FF66631BA13+3586963]\n\tGetHandleVerifier [0x00007FF66631144D+3544525]\n\tGetHandleVerifier [0x00007FF66607C9AA+838442]\n\t(No symbol) [0x00007FF665F2D01F]\n\t(No symbol) [0x00007FF665F295E4]\n\t(No symbol) [0x00007FF665F29786]\n\t(No symbol) [0x00007FF665F18CB9]\n\tBaseThreadInitThunk [0x00007FFD6BB27374+20]\n\tRtlUserThreadStart [0x00007FFD6D93CC91+33]", "trace": "self = <tests.sidebar_test.TestSidebar object at 0x000001CA5A3D0AC0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"06472c53ac1dfb680e8ffa1d3aee5f89\")>\nlogin_page = <pages.login_page.LoginPage object at 0x000001CA5A402020>\nsidebar_page = <pages.sidebar_page.SideBarPage object at 0x000001CA5A401060>\nproducts_page = <pages.products_page.ProductsPage object at 0x000001CA5A403E80>\ncart_page = <pages.cart_page.CartPage object at 0x000001CA5A403C10>\n\n    @allure.title(\"Validate Reset Button\")\n    @allure.description(\"This test validates the app reset functionality.\")\n    def test_03_app_reset_functionality(self, setup, login_page, sidebar_page, products_page, cart_page):\n        login_page.fill_info(self.valid_username, self.valid_password)\n        products_page.add_to_cart(random.randint(1, 6))\n    \n        shopping_cart_badge = products_page._CART_COUNT\n    \n        # Wait until the cart has at least one item\n        WebDriverWait(sidebar_page.driver, 10).until(\n            EC.text_to_be_present_in_element(\n                shopping_cart_badge,\n                \"1\"\n            )\n        )\n    \n>       cart_badge = sidebar_page.driver.find_element(shopping_cart_badge)\n\nsidebar_test.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:766: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CA5A400D30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...07FF665F18CB9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD6BB27374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD6D93CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=133.0.6943.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF665FB6EE5+28773]\nE       \t(No symbol) [0x00007FF665F225D0]\nE       \t(No symbol) [0x00007FF665DB8FAA]\nE       \t(No symbol) [0x00007FF665E0F05A]\nE       \t(No symbol) [0x00007FF665E0F4BC]\nE       \t(No symbol) [0x00007FF665E62A27]\nE       \t(No symbol) [0x00007FF665E3728F]\nE       \t(No symbol) [0x00007FF665E5F6F3]\nE       \t(No symbol) [0x00007FF665E37023]\nE       \t(No symbol) [0x00007FF665DFFF5E]\nE       \t(No symbol) [0x00007FF665E011E3]\nE       \tGetHandleVerifier [0x00007FF66630422D+3490733]\nE       \tGetHandleVerifier [0x00007FF66631BA13+3586963]\nE       \tGetHandleVerifier [0x00007FF66631144D+3544525]\nE       \tGetHandleVerifier [0x00007FF66607C9AA+838442]\nE       \t(No symbol) [0x00007FF665F2D01F]\nE       \t(No symbol) [0x00007FF665F295E4]\nE       \t(No symbol) [0x00007FF665F29786]\nE       \t(No symbol) [0x00007FF665F18CB9]\nE       \tBaseThreadInitThunk [0x00007FFD6BB27374+20]\nE       \tRtlUserThreadStart [0x00007FFD6D93CC91+33]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "description": "This test validates the app reset functionality.", "start": 1740122975395, "stop": 1740122978264, "uuid": "bda837a2-f048-45bc-a346-9fb9c4a4b03f", "historyId": "bc4a154de334e7c950254be201313cdb", "testCaseId": "bc4a154de334e7c950254be201313cdb", "fullName": "tests.sidebar_test.TestSidebar#test_03_app_reset_functionality", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "sidebar_test"}, {"name": "subSuite", "value": "TestSidebar"}, {"name": "host", "value": "Assaf"}, {"name": "thread", "value": "28784-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.sidebar_test"}]}