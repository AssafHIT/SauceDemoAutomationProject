{"name": "test_02_remove_item_from_cart[2]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=134.0.6998.167)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6EA7A4C25+3179557]\n\t(No symbol) [0x00007FF6EA4088A0]\n\t(No symbol) [0x00007FF6EA2991CA]\n\t(No symbol) [0x00007FF6EA271753]\n\t(No symbol) [0x00007FF6EA31F83E]\n\t(No symbol) [0x00007FF6EA33FBE2]\n\t(No symbol) [0x00007FF6EA317A03]\n\t(No symbol) [0x00007FF6EA2E06D0]\n\t(No symbol) [0x00007FF6EA2E1983]\n\tGetHandleVerifier [0x00007FF6EA8067CD+3579853]\n\tGetHandleVerifier [0x00007FF6EA81D1D2+3672530]\n\tGetHandleVerifier [0x00007FF6EA812153+3627347]\n\tGetHandleVerifier [0x00007FF6EA57092A+868650]\n\t(No symbol) [0x00007FF6EA412FFF]\n\t(No symbol) [0x00007FF6EA40F4A4]\n\t(No symbol) [0x00007FF6EA40F646]\n\t(No symbol) [0x00007FF6EA3FEAA9]\n\tBaseThreadInitThunk [0x00007FFAD6CBE8D7+23]\n\tRtlUserThreadStart [0x00007FFAD8D7BF6C+44]", "trace": "@pytest.fixture(scope=\"function\")\n    def setup():\n        \"\"\"Fixture to set up and tear down WebDriver.\"\"\"\n        options = Options()\n        options.add_experimental_option(\"detach\", False)\n        driver = webdriver.Chrome(options=options)\n        driver.get(ConfigReader.read_config(\"settings\", \"base_url\"))\n>       driver.maximize_window()\n\ntests\\conftest.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:532: in maximize_window\n    self.execute(command, None)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017795766710>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF6EA3FEAA9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD6CBE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD8D7BF6C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=134.0.6998.167)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6EA7A4C25+3179557]\nE       \t(No symbol) [0x00007FF6EA4088A0]\nE       \t(No symbol) [0x00007FF6EA2991CA]\nE       \t(No symbol) [0x00007FF6EA271753]\nE       \t(No symbol) [0x00007FF6EA31F83E]\nE       \t(No symbol) [0x00007FF6EA33FBE2]\nE       \t(No symbol) [0x00007FF6EA317A03]\nE       \t(No symbol) [0x00007FF6EA2E06D0]\nE       \t(No symbol) [0x00007FF6EA2E1983]\nE       \tGetHandleVerifier [0x00007FF6EA8067CD+3579853]\nE       \tGetHandleVerifier [0x00007FF6EA81D1D2+3672530]\nE       \tGetHandleVerifier [0x00007FF6EA812153+3627347]\nE       \tGetHandleVerifier [0x00007FF6EA57092A+868650]\nE       \t(No symbol) [0x00007FF6EA412FFF]\nE       \t(No symbol) [0x00007FF6EA40F4A4]\nE       \t(No symbol) [0x00007FF6EA40F646]\nE       \t(No symbol) [0x00007FF6EA3FEAA9]\nE       \tBaseThreadInitThunk [0x00007FFAD6CBE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFAD8D7BF6C+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "parameters": [{"name": "product_index", "value": "2"}], "start": 1743915022325, "stop": 1743915022325, "uuid": "0d1ef9cb-6a68-472f-86b6-af90b0b50a4f", "historyId": "1a7a9cf50fd64c185e778cc8caea0826", "testCaseId": "5a618756230c792c7fb8538f2035fb9e", "fullName": "tests.cart_test.TestCart#test_02_remove_item_from_cart", "labels": [{"name": "suite", "value": "Cart Management Tests"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'login_page', 'products_page', 'cart_page')"}, {"name": "parentSuite", "value": "tests"}, {"name": "subSuite", "value": "TestCart"}, {"name": "host", "value": "LAPTOP-C4CE8MUH"}, {"name": "thread", "value": "35220-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.cart_test"}]}